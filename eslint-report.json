[{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/PRCodeReviews.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/bus-factor.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'axios' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'parseGitHubUrl' is defined but never used.","line":2,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseGitHubUrl' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[290,293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[290,293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[311,314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[311,314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getToken, parseGitHubUrl, get_axios_params, getCommitsAndContributors} from '../url';\nimport logger from '../logger';\n\ninterface BusFactorResult {\n  busFactor: number;\n  normalizedScore: number;\n  latency: number;\n}\n\nfunction calculateBusFactor(commits: any[], contributors: any[]): Omit<BusFactorResult, 'latency'> {\n  logger.debug('Calculating bus factor', { commitCount: commits.length, contributorCount: contributors.length });\n    \n  const commitCounts: { [key: string]: number } = {};\n    \n  commits.forEach(commit => {\n    const author = commit.commit.author.name;\n    commitCounts[author] = (commitCounts[author] || 0) + 1;\n  });\n  \n  const totalCommits = commits.length;\n  const totalContributors = contributors.length;\n  \n  if (totalCommits === 0 || totalContributors === 0) {\n    logger.warn('Repository has no commits or contributors', { totalCommits, totalContributors });\n    return { busFactor: 1, normalizedScore: 0 };\n  }\n  \n  const sortedContributions = Object.values(commitCounts).sort((a, b) => b - a);\n    \n  let accumulatedCommits = 0;\n  let busFactor = 0;\n  \n  for (const count of sortedContributions) {\n    accumulatedCommits += count;\n    busFactor++;\n    if (accumulatedCommits > totalCommits * 0.8) break; // Increased from 0.5 to 0.8\n  }\n  \n  const normalizedScore = normalizeScore(busFactor, totalContributors, totalCommits);\n  \n  logger.debug('Bus factor calculation complete', { busFactor, normalizedScore });\n  return { busFactor, normalizedScore };\n}\n\nfunction normalizeScore(busFactor: number, totalContributors: number, totalCommits: number): number {\n  logger.debug('Normalizing bus factor score', { busFactor, totalContributors, totalCommits });\n  \n  if (totalContributors === 0 || totalCommits < 20) {\n    logger.warn('Repository has too few contributors or commits for meaningful score', { totalContributors, totalCommits });\n    return 0; // Penalize repos with very few commits\n  }\n\n  const contributorRatio = busFactor / totalContributors;\n  const commitThreshold = Math.min(totalCommits / 100, 1000); // Adjust based on repo size\n\n  let score = contributorRatio * (totalCommits / commitThreshold);\n  \n  // Penalize projects with very few contributors\n  if (totalContributors < 3) {\n    logger.info('Applying penalty for low contributor count', { totalContributors });\n    score *= 0.5;\n  }\n\n  const finalScore = Math.max(0, Math.min(1, score));\n  logger.debug('Normalized score calculated', { finalScore });\n  return finalScore;\n}\n\nexport async function get_bus_factor(url: string): Promise<BusFactorResult> {\n  const startTime = Date.now();\n  logger.info('Starting bus factor calculation', { url });\n  \n  try {\n    const { owner, repo, headers } = get_axios_params(url, getToken());\n    logger.debug('Fetching commits and contributors', { owner, repo });\n    const { commits, contributors } = await getCommitsAndContributors(owner, repo, headers);\n    const result = calculateBusFactor(commits, contributors);\n  \n    const latency = Date.now() - startTime;\n    logger.info('Bus factor calculation complete', { url, latency, ...result });\n  \n    return { ...result, latency };\n  } catch (error) {\n    logger.error('Error calculating bus factor', { url, error: (error as Error).message });\n    return { busFactor: 1, normalizedScore: 0, latency: 0 };\n  }\n}","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/correctness.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/dependency.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2060,2063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2060,2063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3024,3027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3024,3027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4047,4050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4047,4050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport logger from '../logger'; // Adjust the import path accordingly\nimport { get_axios_params, getToken } from '../url'; // Adjust the import path accordingly\nimport semver from 'semver';\n\ninterface DependencyResult {\n  score: number;\n  latency: number;\n}\n\n/**\n * Determines if a version string is pinned to at least a major and minor version.\n * @param version The version string from package.json.\n * @returns True if the version is pinned, false otherwise.\n */\nfunction isVersionPinned(version: string): boolean {\n  try {\n    const range = new semver.Range(version);\n    const [semverSet] = range.set;\n\n    // Check if the range is pinned to at least major and minor\n    return semverSet.every((comparator) => {\n      return (\n        comparator.operator === '' &&\n        comparator.semver.major !== null &&\n        comparator.semver.minor !== null\n      );\n    });\n  } catch (error) {\n    logger.warn(`Invalid semver version: ${version}`, { error: (error as Error).message });\n    return false;\n  }\n}\n\n/**\n * Calculates the dependency pinning score.\n * @param dependencies An object containing dependency versions.\n * @returns The fraction of dependencies that are pinned. Returns 1.0 if there are no dependencies.\n */\nfunction calculatePinningScore(dependencies: { [key: string]: string }): number {\n  const totalDependencies = Object.keys(dependencies).length;\n  if (totalDependencies === 0) {\n    return 1.0;\n  }\n\n  const pinnedDependencies = Object.values(dependencies).filter(isVersionPinned).length;\n  return pinnedDependencies / totalDependencies;\n}\n\n/**\n * Fetches the package.json from a GitHub repository and calculates the dependency pinning score.\n * @param owner The owner of the repository (user or organization).\n * @param repo The name of the repository.\n * @param headers Axios headers including authorization.\n * @returns The dependency pinning score as a number between 0 and 1, or null if failed.\n */\nasync function _getDependencyPinningFractionFromPackageJson(\n  owner: string,\n  repo: string,\n  headers: any\n): Promise<number | null> {\n  try {\n    const packageJsonUrl = `https://api.github.com/repos/${owner}/${repo}/contents/package.json`;\n    const packageResponse = await axios.get(packageJsonUrl, { headers });\n\n    // Decode package.json content from base64\n    if (packageResponse.data.content) {\n      const packageContent = Buffer.from(packageResponse.data.content, 'base64').toString('utf-8');\n      const packageJson = JSON.parse(packageContent);\n\n      // Combine all dependencies\n      const allDependencies: { [key: string]: string } = {\n        ...packageJson.dependencies,\n        ...packageJson.devDependencies,\n        ...packageJson.peerDependencies,\n        ...packageJson.optionalDependencies,\n      };\n\n      // Calculate pinning score\n      const pinningScore = calculatePinningScore(allDependencies);\n      return pinningScore;\n    }\n\n    logger.error(`package.json content not found for ${owner}/${repo}.`);\n    return null;\n  } catch (error: any) {\n    logger.error(`Failed to fetch package.json for ${owner}/${repo}:`, error.message);\n    return null;\n  }\n}\n\n/**\n * Fetches the dependency pinning fraction from package.json of a GitHub repository.\n * @param url GitHub repository URL.\n * @returns The dependency pinning score as a MetricResult object containing score and latency.\n */\nexport async function getDependencyPinningFraction(url: string): Promise<DependencyResult> {\n  const startTime = Date.now();\n  logger.info('Starting Dependency Pinning calculation', { url });\n\n  try {\n    const token = getToken(); // Fetch token internally\n    const { owner, repo, headers } = get_axios_params(url, token);\n    const pinningScore = await _getDependencyPinningFractionFromPackageJson(owner, repo, headers);\n    const latency = Date.now() - startTime;\n\n    // Ensure pinningScore is a number\n    const score = pinningScore ?? 0;\n\n    logger.info('Dependency Pinning calculation complete', { url, score, latency });\n    return { score, latency };\n  } catch (error: any) {\n    const latency = Date.now() - startTime;\n    logger.error(`Error calculating Dependency Pinning for ${url}:`, error.message);\n    return { score: 0, latency };\n  }\n}","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/license-compatibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/ramp-up-time.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/metrics/responsiveness.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/backend/url.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'get' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'get' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'GitHub' is defined but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'NPM' is defined but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"no-unused-vars","severity":1,"message":"'Other' is defined but never used.","line":31,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1437,1440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1437,1440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1844,1847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1844,1847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3945,3948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3945,3948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6101,6104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6101,6104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7095,7098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7095,7098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7710,7713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7710,7713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9683,9686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9683,9686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10100,10103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10100,10103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10533,10536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10533,10536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11548,11551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11548,11551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as dotenv from 'dotenv';\nimport axios from 'axios';\nimport * as responsive from './metrics/responsiveness';\nimport logger from './logger';  // Import the logger\nimport { get } from 'http';\n\ndotenv.config();\n\ninterface RepoContent {\n    name: string;\n    url: string;\n}\n\ninterface ReadmeContent {\n    content: string;\n}\n\ninterface NpmPackageInfo {\n    repository?: {\n        url?: string;\n    };\n}\n\ninterface Comment {\n    created_at: string;\n}\n\nexport enum UrlType {\n    GitHub,\n    NPM,\n    Other\n}\n\nexport function getToken(): string {\n  const githubToken = process.env.GITHUB_TOKEN;\n  if (!githubToken) {\n    logger.error('GITHUB_TOKEN is not set in .env file');\n  }\n  return githubToken as string;\n}\n\nexport function test_API(): void {\n  const githubToken = getToken();\n  const OWNER = 'nikivakil';\n  const REPO = '461-team';\n    \n  const getPullRequestCount = async() => {\n    try {\n      const response = await axios.get(`https://api.github.com/repos/${OWNER}/${REPO}/pulls?state=all`, {\n        headers: {\n          Authorization: `token ${githubToken}`\n        }\n      });\n      logger.info(`Number of pull requests: ${response.data.length}`, { owner: OWNER, repo: REPO });\n    } catch (error) {\n      logger.error('Error fetching pull requests', { error: (error as Error).message, owner: OWNER, repo: REPO });\n    }\n  }\n  getPullRequestCount();\n}\n\nexport async function getOpenPRs(owner: string, repo: string, headers: any): Promise<number> {\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/pulls?state=open`;\n  logger.debug('Fetching open PRs', { owner, repo });\n  const response = await axios.get(apiUrl, { headers });\n  logger.debug('Open PRs fetched', { count: response.data.length, owner, repo });\n  return response.data.length;\n}\n\nexport async function getClosedPRs(owner: string, repo: string, headers: any): Promise<number> {\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/pulls?state=closed`;\n  logger.debug('Fetching closed PRs', { owner, repo });\n  const response = await axios.get(apiUrl, { headers });\n  logger.debug('Closed PRs fetched', { count: response.data.length, owner, repo });\n  return response.data.length;\n}\n\nexport function classifyURL(url: string): UrlType {\n  logger.debug('Classifying URL', { url });\n  if (url.includes('github.com')) {\n    return UrlType.GitHub;\n  } else if (url.includes('npmjs.com') || url.startsWith('npm:')) {\n    return UrlType.NPM;\n  } else {\n    return UrlType.Other;\n  }\n}\n\nexport function extractNpmPackageName(url: string): string | null {\n  logger.debug('Extracting NPM package name', { url });\n  const match = url.match(/npmjs\\.com\\/package\\/([^/]+)/);\n  return match ? match[1] : null;\n}\n\nexport async function getNpmPackageGitHubUrl(packageName: string): Promise<string | null> {\n  logger.debug('Fetching GitHub URL for NPM package', { packageName });\n  try {\n    const response = await axios.get<NpmPackageInfo>(`https://registry.npmjs.org/${packageName}`);\n    const repoUrl = response.data.repository?.url;\n        \n    if (repoUrl) {\n      let cleanUrl = repoUrl.replace(/^git\\+/, '').replace(/\\.git$/, '');\n      if (cleanUrl.startsWith('git://')) {\n        cleanUrl = 'https://' + cleanUrl.slice(6);\n      }\n      logger.debug('GitHub URL fetched for NPM package', { packageName, cleanUrl });\n      return cleanUrl;\n    }\n    logger.warn('No GitHub URL found for NPM package', { packageName });\n    return null;\n  } catch (error) {\n    logger.error('Error fetching NPM package info', { packageName, error: (error as Error).message });\n    return null;\n  }\n}\n\nexport function parseGitHubUrl(url: string): { owner: string; repo: string } {\n  logger.debug('Parsing GitHub URL', { url });\n  const match = url.match(/github.com\\/([^/]+)\\/([^/]+)/);\n  return match ? { owner: match[1], repo: match[2] } : { owner: '', repo: '' };\n}\n\nexport function get_axios_params(url: string, token: string): {owner: string, repo: string, headers: any} {\n  const {owner, repo} = parseGitHubUrl(url);\n  const headers = {\n    Authorization: `token ${token}`,\n    Accept: 'application/vnd.github.v3+json'\n  };\n  logger.debug('Generated axios parameters', { owner, repo });\n  return {owner, repo, headers};\n}\n\nexport async function getReadmeContent(owner: string, repo: string): Promise<string> {\n  logger.info('Fetching README content', { owner, repo });\n  const token = getToken();\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents`;\n\n  const headers = {\n    'Authorization': `token ${token}`,\n    'Accept': 'application/vnd.github.v3+json'\n  };\n\n  try {\n    const response = await axios.get<RepoContent[]>(apiUrl, { headers });\n    const readmeFile = response.data.find(file => file.name.toLowerCase().startsWith('readme'));\n    if (!readmeFile) {\n      logger.warn('README file not found', { owner, repo });\n      throw new Error('README file not found');\n    }\n\n    const readmeResponse = await axios.get<ReadmeContent>(readmeFile.url, { headers });\n    const decodedContent = Buffer.from(readmeResponse.data.content, 'base64').toString('utf-8');\n    logger.debug('README content fetched successfully', { owner, repo, contentLength: decodedContent.length });\n    return decodedContent;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      logger.error('API request failed', { owner, repo, status: error.response?.status, statusText: error.response?.statusText });\n      throw new Error(`API request failed: ${error.response?.status} ${error.response?.statusText}`);\n    }\n    logger.error('Error fetching README content', { owner, repo, error: (error as Error).message });\n    throw error;\n  }\n}\n\nexport function test_getReadmeContent(): void {\n  const OWNER = 'nikivakil';\n  const REPO = '461-team';\n\n  getReadmeContent(OWNER, REPO)\n    .then(readmeContent => logger.info('README content fetched', { owner: OWNER, repo: REPO, contentLength: readmeContent.length }))\n    .catch(error => logger.error('Error fetching README content', { owner: OWNER, repo: REPO, error: error.message }));\n}\n\nexport async function get_avg_ClosureTime(owner: string, repo: string, headers: any) {\n  logger.debug('Calculating average closure time', { owner, repo });\n  try {\n    const response = await axios.get(`https://api.github.com/repos/${owner}/${repo}/issues?state=closed`, { headers });\n        \n    let totalClosureTime = 0;\n    let totalIssues = 0;\n    for (const issue of response.data) {\n      if (issue.state === 'closed') {\n        totalClosureTime += responsive.getTimeDifferenceInHours(issue.created_at, issue.closed_at);\n        totalIssues++;\n      }\n    }\n    if (totalIssues === 0) {\n      logger.warn('No closed issues found', { owner, repo });\n      return 0;\n    }\n    const avgClosureTime = totalClosureTime / totalIssues;\n    logger.debug('Average closure time calculated', { owner, repo, avgClosureTime });\n    return avgClosureTime;\n  } catch (error) {\n    logger.error('Error calculating average closure time', { owner, repo, error: (error as Error).message });\n  }\n}\n\nexport async function getComments(owner: string, repo: string, number: number, headers: any): Promise<Comment[]> {\n  logger.debug('Fetching comments', { owner, repo, prNumber: number });\n  try {\n    const response = await axios.get<Comment[]>(`https://api.github.com/repos/${owner}/${repo}/issues/${number}/comments`, { headers });\n    logger.debug('Comments fetched', { owner, repo, prNumber: number, commentCount: response.data.length });\n    return response.data;\n  } catch (error) {\n    logger.error('Error fetching comments', { owner, repo, prNumber: number, error: (error as Error).message });\n    return [];\n  }\n}\n\nexport async function get_avg_Responsetime(owner: string, repo: string, headers: any) {\n  logger.debug('Calculating average response time', { owner, repo });\n  try {\n    const Pulls = await axios.get(`https://api.github.com/repos/${owner}/${repo}/pulls?state=all`, { headers });\n    let total_Pulls = 0;\n    let total = 0;\n\n    for (const pull of Pulls.data) {\n      const PR_number = pull.number;\n      const comments = await getComments(owner, repo, PR_number, headers);\n      if (comments.length == 0) {\n        total_Pulls++;\n        continue;\n      } else if (comments.length == 1) {\n        total += responsive.getTimeDifferenceInHours(pull.created_at, comments[0].created_at);\n      } else {\n        comments.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\n        total += responsive.getTimeDifferenceInHours(pull.created_at, comments[0].created_at);\n      }\n      total_Pulls++;\n    }\n    if (total_Pulls == 0) {\n      logger.warn('No pull requests found', { owner, repo });\n      return 0;\n    }\n    const avgResponseTime = total / total_Pulls;\n    logger.debug('Average response time calculated', { owner, repo, avgResponseTime });\n    return avgResponseTime;\n  } catch (error) {\n    logger.error('Error calculating average response time', { owner, repo, error: (error as Error).message });\n  }\n}\n\nexport async function getIssues(owner: string, repo: string) {\n  logger.debug('Fetching all issues', { owner, repo });\n  const token = getToken();\n  const { headers } = get_axios_params(`https://github.com/${owner}/${repo}`, token);\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/issues?state=all`;\n\n  try {\n    const response = await axios.get(apiUrl, { headers });\n    logger.debug('Issues fetched', { owner, repo, issueCount: response.data.length });\n    return response.data;\n  } catch (error) {\n    logger.error('Error fetching issues', { owner, repo, error: (error as Error).message });\n    throw error;\n  }\n}\n\nexport async function getOpenIssues(owner: string, repo: string, headers: any): Promise<number> {\n  logger.debug('Fetching open issues', { owner, repo });\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/issues?state=open`;\n  const response = await axios.get(apiUrl, { headers });\n  logger.debug('Open issues fetched', { owner, repo, count: response.data.length });\n  return response.data.length;\n}\n\nexport async function getClosedIssues(owner: string, repo: string, headers: any): Promise<number> {\n  logger.debug('Fetching closed issues', { owner, repo });\n  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/issues?state=closed`;\n  const response = await axios.get(apiUrl, { headers });\n  logger.debug('Closed issues fetched', { owner, repo, count: response.data.length });\n  return response.data.length;\n}\n\nexport async function getCommitsAndContributors(owner: string, repo: string, headers: any) {\n  logger.debug('Fetching commits and contributors', { owner, repo });\n  const commitsUrl = `https://api.github.com/repos/${owner}/${repo}/commits?per_page=100`;\n  const contributorsUrl = `https://api.github.com/repos/${owner}/${repo}/contributors?per_page=100`;\n  \n  try {\n    const [commitsResponse, contributorsResponse] = await Promise.all([\n      axios.get(commitsUrl, { headers }),\n      axios.get(contributorsUrl, { headers })\n    ]);\n  \n    logger.debug('Commits and contributors fetched', { \n      owner, \n      repo, \n      commitCount: commitsResponse.data.length, \n      contributorCount: contributorsResponse.data.length \n    });\n    return {\n      commits: commitsResponse.data,\n      contributors: contributorsResponse.data\n    };\n  } catch (error) {\n    logger.error('Error fetching commits and contributors', { owner, repo, error: (error as Error).message });\n    return { commits: [], contributors: [] };\n  }\n}\n\nexport async function getCodeReviewLines(owner: string, repo: string, headers: any) {\n  logger.debug('Calculating number of lines that were code reviewed', { owner, repo });\n  try {\n    const Pulls = await axios.get(`https://api.github.com/repos/${owner}/${repo}/pulls?state=all&per_page=100`, { headers });\n    let totalLinesAdded = 0;\n    let reviewedLinesAdded = 0;\n        \n    if(Pulls.data.length == 0) {\n      logger.warn('No pull requests found', { owner, repo });\n      return 0;\n    }\n        \n    for (const pull of Pulls.data) {\n      const prData = await axios.get(`https://api.github.com/repos/${owner}/${repo}/pulls/${pull.number}`, { headers });\n      totalLinesAdded += prData.data.additions;\n\n      const reviewsUrl = `https://api.github.com/repos/${owner}/${repo}/pulls/${pull.number}/reviews`;\n      const reviews = await axios.get(reviewsUrl, {headers});\n\n      if (reviews.data.length > 0) {\n        // If the PR has reviews, add its additions to the reviewed lines count\n        reviewedLinesAdded += prData.data.additions;\n      }\n    }\n    if (totalLinesAdded == 0) {\n      logger.warn('No lines added found', { owner, repo });\n      return 0;\n    }\n    if (reviewedLinesAdded == 0) {\n      logger.warn('No lines reviewed found', { owner, repo });\n      return 0;\n    }\n    const ratioReviewedLinesAdded = (reviewedLinesAdded / totalLinesAdded);\n    logger.debug('Calculated values for lines that were code reviewed', { owner, repo, reviewedLinesAdded, totalLinesAdded, ratioReviewedLinesAdded });\n    return ratioReviewedLinesAdded;\n  } catch (error) {\n    logger.error('Error calculating number of lines added through code reviews', { owner, repo, error: (error as Error).message });\n  }\n}","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]},{"filePath":"/home/shay/a/ko109/461/Phase2-Code/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]}]}]